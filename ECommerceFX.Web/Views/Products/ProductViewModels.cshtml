@using System.Linq
@inherits NancyRazorViewBase<ECommerceFX.Web.ViewModels.Products.ProductViewModels>
@{
  Layout = "Layout.cshtml";
}

<div id="testPlaceholder"></div>

@*          <td>
            <a href="~products/edit/@product.Id" class="btn btn-info btn-sm" data-toggle="tooltip" data-placement="top" title="Edit"><span class="glyphicon glyphicon-edit"></span></a>
          </td>*@

@section Scripts {
  
  <script type="text/jsx;harmony=true">
    (function() {
      //$('[data-toggle="tooltip"]').tooltip();
    
    var productHub, ProductList, ProductBox, ProductRow, ProductCreateForm, productBoxComponent;

      productHub = $.connection.productHub;
      ProductRow = React.createClass({
        render: function(){
          return (
            <tr>
              <td>{this.props.name}</td>
              <td>{this.props.description}</td>
              <td>
                <form action={'/products/delete/'+this.props.id} method="POST">
                  <button className="btn btn-danger btn-sm" type="submit" data-toggle="tooltip" data-placement="top" title="Delete" onclick="return confirm('Are you sure you want to delete this product?')">
                    <span className="glyphicon glyphicon-trash"></span>
                  </button>
                </form>
              </td>
            </tr>
          )
        }
      });
    
      ProductBox = React.createClass({
        loadProductsFromServer: function(){
          $.ajax({
            url: this.props.getUrl,
            dataType: 'json',
            success: function(data) {
              this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err){
              console.error(this.props.getUrl, status, err.toString());
            }.bind(this)
          });
        },
        addNewProduct: function(product, isSourceClient) {
          if(!isSourceClient) {
            var products = this.state.data;
            var newProducts = products.concat([product]);
            this.setState({data: newProducts});
          }
        },
        handleNewProduct: function(product) {
          this.addNewProduct(product, true);
          $.ajax({
            url: this.props.createUrl,
            dataType: 'json',
            type: 'POST',
            data: product,
            success: function(data){}.bind(this),
            error: function(xhr, status, err){
              console.error(this.props.createUrl, status, err.toString());
            }.bind(this)
          });
        },
        getInitialState: function() {
          return {data: []};
        },
        componentDidMount: function() {
          this.loadProductsFromServer();
        },
        render: function(){
          return( 
          <div className="productBox">
            <h2>Products</h2>
            <ProductList data={this.state.data} />
            <ProductCreateForm onProductCreate={this.handleNewProduct} />
          </div>
          );
        }
      });
    
      ProductCreateForm = React.createClass({
        handleSubmit: function(e) {
          e.preventDefault();
          var name = this.refs.name.getDOMNode().value.trim();
          var description = this.refs.description.getDOMNode().value.trim();
          if(!name || !description) return;
          this.props.onProductCreate({name: name, description: description});
          this.refs.name.getDOMNode().value = '';
          this.refs.description.getDOMNode().value = '';
        },
        render: function() {
          return (
            <form className="productCreateForm" onSubmit={this.handleSubmit}>
              <input type="text" placeholder="Name" ref="name" />
              <textarea placeholder="Description..." ref="description" />
              <input type="submit" value="Create your new product" />
            </form>
          );
        }
      });

      ProductList = React.createClass({
        render: function() {
          var productRows = this.props.data.map(function(p) {
            return (
            <ProductRow key={p.id} id={p.id} name={p.name} description={p.description} />
            );
          });
          return (
            <div className="produtcsList">
              <table id="productListTable" className="table table-bordered table-list-search">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Conrtols</th>
                  </tr>
                </thead>
                <tbody>
                  {productRows}
                </tbody>
              </table>
            </div>
            );
        }
      });

     productBoxComponent = React.render(<ProductBox getUrl="/products/all" createUrl="/products/create" />, document.getElementById('testPlaceholder'));

      productHub.client.broadcastProductCreated = function(product) {
        productBoxComponent.addNewProduct(product, false);
      };

    })();

  </script>
}